h1. Ruby client library for the Google Storage API

This is the first release and supports all the basic operations.  Advanced support for ACLs etc.. coming soon

h2. Install the gem

sudo gem install gstore

h2. Using the gem

Visit "The Google Storage Key Manager":https://sandbox.google.com/storage/m/manage to get your access and secret keys.

In your code just: <code>require 'gstore'</code>

h2. Basic Examples

Create an instance of the client with your credentials:

<pre><code>client = GStore::Client.new(
   :access_key => 'YOUR_ACCESS_KEY',
   :secret_key => 'YOUR_SECRET_KEY'
)

# List all of your existing Buckets
client.list_buckets
</code></pre>

Here are some example bucket operations:

<pre><code># Create a Bucket
client.create_bucket('my_unique_bucket')

# Retrieve a Bucket
client.get_bucket('my_unique_bucket')

# Delete a [empty] Bucket
client.delete_bucket('my_unique_bucket')
</code></pre>

Once you have a bucket you can manipulate objects in the following way:

<pre><code># Store a file in a bucket
client.put_object('my_unique_bucket', 'my_first_object', :data => File.read('mytext.txt'))

# Retrieve the contents of the object in the specified bucket
puts client.get_object('my_unique_bucket', 'my_first_object')

# Alternatively specify an outfile and the contents will be saved to there
client.get_object('my_unique_bucket', 'my_first_object', :outfile => 'retrieved_mytext.txt')

# Delete an object from the bucket
client.delete_object('my_unique_bucket', 'my_first_object')
</code></pre>

h2. Advanced Examples

h3. Query parameters

For certain requests like <code>get_bucket('my_unique_bucket')</code> you can specify query parameters like <code>max-keys</code>, <code>prefix</code>, <code>delimiter</code> and <code>marker</code> (see "The Google Developer Guide":http://code.google.com/apis/storage/docs/developer-guide.html) for more information.

Here's an example with gstore:

<pre><code>client.get_bucket('my_unique_bucket', :params => {:max_keys => 2, :prefix => 'backup'})
</code></pre>

* <code>max_keys</code> is converted to <code>max-keys</code> so you can use the ruby symbol without quotes. <code>:"max-keys"</code> and <code>"max-keys"</code> also work

h3. Access Control

Here is how you retrieve the ACL for a bucket or object:

<pre><code>client.get_bucket('my_unique_bucket', :params => {:acl => ''})
client.get_bucket('my_unique_bucket', 'my_first_object', :params => {:acl => ''})
</pre></code>

To create a bucket or object with one of the pre-defined ACL's:

<pre><code>client.create_bucket('my_public_bucket', :headers => {:x_goog_acl => 'public-read'})
client.create_object('my_public_bucket', 'my_public_object', :headers => {:x_goog_acl => 'public-read-write'})
</code></pre>

* <code>x_goog_acl</code> is converted to <code>x-goog-acl</code> so you can use the ruby symbol without quotes. <code>:"x-goog-acl"</code> and <code>"x-goog-acl"</code> also work

h2. TODO List by ruanwz

1 Write features to verify the basic usage of google storage api (done).
2 Now the response is returned in xml format. Need to wrap into objects
3 Write a command line tool for it
